name: PlatformIO Build

on:
  push:
    branches: [ main, develop, github-actions ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        platform:
          - "atmelavr"
          - "espressif8266" 
          - "espressif32"
          - "ststm32"
        board:
          - platform: "atmelavr"
            board: "uno"
          - platform: "atmelavr" 
            board: "nano"
          - platform: "espressif8266"
            board: "nodemcuv2"
          - platform: "espressif32"
            board: "esp32dev"
          - platform: "ststm32"
            board: "nucleo_f401re"
        include:
          - platform: "atmelavr"
            board: "uno"
          - platform: "atmelavr"
            board: "nano"
          - platform: "espressif8266"
            board: "nodemcuv2"
          - platform: "espressif32"
            board: "esp32dev"
          - platform: "ststm32"
            board: "nucleo_f401re"

    steps:
    - uses: actions/checkout@v4
    
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Create test project structure
      run: |
        mkdir -p test_project/lib/SevenSegmentTM1637
        cp -r src/* test_project/lib/SevenSegmentTM1637/
        cp library.json test_project/lib/SevenSegmentTM1637/

    - name: Test Basic Example
      run: |
        mkdir -p test_project/basic/src
        cp examples/Basic/Basic.ino test_project/basic/src/main.cpp
        cd test_project/basic
        cat > platformio.ini << EOF
        [env:test]
        platform = ${{ matrix.platform }}
        board = ${{ matrix.board }}
        framework = arduino
        lib_deps = 
            file://../lib/SevenSegmentTM1637
        EOF
        pio run

    - name: Test PrintNumber Example
      run: |
        mkdir -p test_project/printnumber/src
        cp examples/PrintNumber/PrintNumber.ino test_project/printnumber/src/main.cpp
        cd test_project/printnumber
        cat > platformio.ini << EOF
        [env:test]
        platform = ${{ matrix.platform }}
        board = ${{ matrix.board }}
        framework = arduino
        lib_deps = 
            file://../lib/SevenSegmentTM1637
        EOF
        pio run

    - name: Test SerialPrint Example
      run: |
        mkdir -p test_project/serialprint/src
        cp examples/SerialPrint/SerialPrint.ino test_project/serialprint/src/main.cpp
        cd test_project/serialprint
        cat > platformio.ini << EOF
        [env:test]
        platform = ${{ matrix.platform }}
        board = ${{ matrix.board }}
        framework = arduino
        lib_deps = 
            file://../lib/SevenSegmentTM1637
        EOF
        pio run

    - name: Test ExtClock Example
      run: |
        mkdir -p test_project/extclock/src
        cp examples/ExtClock/ExtClock.ino test_project/extclock/src/main.cpp
        cd test_project/extclock
        cat > platformio.ini << EOF
        [env:test]
        platform = ${{ matrix.platform }}
        board = ${{ matrix.board }}
        framework = arduino
        lib_deps = 
            file://../lib/SevenSegmentTM1637
        EOF
        pio run

    - name: Test FunPrintAll Example
      run: |
        mkdir -p test_project/funprintall/src
        cp examples/FunPrintAll/FunPrintAll.ino test_project/funprintall/src/main.cpp
        cd test_project/funprintall
        cat > platformio.ini << EOF
        [env:test]
        platform = ${{ matrix.platform }}
        board = ${{ matrix.board }}
        framework = arduino
        lib_deps = 
            file://../lib/SevenSegmentTM1637
        EOF
        pio run

    - name: Test LowLevel Example
      run: |
        mkdir -p test_project/lowlevel/src
        cp examples/LowLevel/LowLevel.ino test_project/lowlevel/src/main.cpp
        cd test_project/lowlevel
        cat > platformio.ini << EOF
        [env:test]
        platform = ${{ matrix.platform }}
        board = ${{ matrix.board }}
        framework = arduino
        lib_deps = 
            file://../lib/SevenSegmentTM1637
        EOF
        pio run

  library-validation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Validate library with PlatformIO
      run: |
        # Create a test project to validate the library
        mkdir -p validation_test/src
        cat > validation_test/platformio.ini << EOF
        [env:validation]
        platform = atmelavr
        board = uno
        framework = arduino
        lib_deps = 
            file://..
        EOF
        
        # Create a simple test sketch
        cat > validation_test/src/main.cpp << EOF
        #include <Arduino.h>
        #include "SevenSegmentTM1637.h"
        
        void setup() {
          // Test library inclusion
        }
        
        void loop() {
        }
        EOF
        
        cd validation_test
        pio run
        echo "✅ Library validation successful"

    - name: Check library structure
      run: |
        echo "📁 Library structure:"
        ls -la
        echo ""
        echo "📄 Source files:"
        ls -la src/
        echo ""
        echo "📚 Examples:"
        ls -la examples/
        echo ""
        echo "📋 Library files:"
        if [ -f "library.json" ]; then
          echo "✅ library.json found"
          echo "Library metadata:"
          cat library.json | head -10
        else
          echo "❌ library.json missing"
        fi
        
        if [ -f "library.properties" ]; then
          echo "✅ library.properties found"
        else
          echo "❌ library.properties missing"
        fi
